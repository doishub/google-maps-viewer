
var GoogleMapsViewer=function(){"use strict";var Constructor=function(mapId,settings){var pub={};var viewer={};var useClustering=false;var useSpiderfier=false;var defaults={initInstant:false,source:{id:"source",type:"geojson",path:false,param:null},marker:{icon:null,options:null},popup:{showEvent:"click",hideEvent:false,options:null,propSelector:"template",source:{path:false,param:null,loader:true,loaderMarkup:'<span class="loader"></span>'}},spider:{spiderfier:false,closePopupOnUnspiderfy:true,format:null,options:{keepSpiderfied:true,markersWontMove:true,markersWontHide:true,basicFormatEvents:false}},cluster:{clustering:false,clusterSteps:null,styles:null,options:{maxZoom:14}},map:{bounds:false,interactive:true,mapTypeControl:false,fullscreen:true,streetview:true,scrollwheel:false,gestureHandling:"cooperative",style:"roadmap",styles:null,zoom:6,minZoom:3,maxZoom:16,lat:null,lng:null}};var init=function(){viewer.settings=extend(true,defaults,settings);viewer.dom=document.getElementById(mapId);viewer.markers=[];if(!viewer.dom){console.warn("GoogleMapsViewer: Dom object could not be loaded by ID",mapId);return}if(viewer.settings.initInstant&&typeof google!=="object"){console.warn("GoogleMapsViewer: google.maps is not defined. If you load the script by async, use onGoogleMapsApiReady-Callback and set option initInstant to false.");return}if(!viewer.settings.initInstant){document.addEventListener("googlemaps.onApiReady",createMap)}else{createMap()}};var createMap=function(){viewer.map=new google.maps.Map(viewer.dom,{zoom:parseInt(viewer.settings.map.zoom),minZoom:parseInt(viewer.settings.map.minZoom),maxZoom:parseInt(viewer.settings.map.maxZoom),center:{lat:parseFloat(viewer.settings.map.lat),lng:parseFloat(viewer.settings.map.lng)},mapTypeControl:viewer.settings.map.mapTypeControl,zoomControl:viewer.settings.map.controls,fullscreenControl:viewer.settings.map.fullscreen,streetViewControl:viewer.settings.map.streetview,disableDoubleClickZoom:!viewer.settings.map.interactive,draggable:viewer.settings.map.interactive,gestureHandling:viewer.settings.map.gestureHandling});viewer.bounds=new google.maps.LatLngBounds;viewer.popup=new google.maps.InfoWindow(viewer.settings.popup.options);viewer.popupAsync=false;if(viewer.settings.popup.source!==null&&viewer.settings.popup.source.path){viewer.popupLoader=new XMLHttpRequest;viewer.popupAsync=true}if(viewer.settings.map.styles!==null){var customStyle=new google.maps.StyledMapType(viewer.settings.map.styles,{name:"Normal"});viewer.map.mapTypes.set("custom_style",customStyle);viewer.map.setMapTypeId("custom_style")}if(viewer.settings.source.path){loadSource(viewer.settings.source.path,viewer.settings.source.param)}else{loadExtensions()}};var loadExtensions=function(){if(viewer.settings.spider!==null&&viewer.settings.spider.spiderfier){addSpiderSupport()}if(viewer.settings.cluster!==null&&viewer.settings.cluster.clustering){addClusterSupport()}};var addClusterSupport=function(){viewer.cluster=new MarkerClusterer(viewer.map,viewer.markers,viewer.settings.cluster.options);if(viewer.settings.cluster.styles){viewer.cluster.setStyles(viewer.settings.cluster.styles)}viewer.cluster.setCalculator(function(markers,numStyles){var count=markers.length;var steps=viewer.settings.cluster.clusterSteps;var index=0;for(var i=0;i<steps.length;i++){if(count>steps[i]){index++}}index=Math.min(index,numStyles);return{text:count,index:index}});useClustering=true};var addSpiderSupport=function(){viewer.spider=new OverlappingMarkerSpiderfier(viewer.map,viewer.settings.spider.options);if(viewer.settings.spider.format!==null){if(viewer.settings.spider.format.length===3){viewer.spider.addListener("format",function(marker,status){var p,w,h;var validStatus=[OverlappingMarkerSpiderfier.markerStatus.SPIDERFIED,OverlappingMarkerSpiderfier.markerStatus.SPIDERFIABLE,OverlappingMarkerSpiderfier.markerStatus.UNSPIDERFIABLE];for(var i=0;i<validStatus.length;i++){if(status===validStatus[i]){p=viewer.settings.spider.format[i][0];w=viewer.settings.spider.format[i][1];h=viewer.settings.spider.format[i][2];break}}marker.setIcon({url:p,scaledSize:new google.maps.Size(w,h)})})}else{console.warn("GoogleMapsViewer: Wrong parameter for spiderfier:format")}}viewer.spider.addListener("unspiderfy",function(a,b){if(viewer.settings.spider.closePopupOnUnspiderfy){viewer.popup.close()}});useSpiderfier=true};var loadSource=function(path,param){var url=path;if(typeof param==="object"){url+="?"+serialize(param)}var sourceLoader=new XMLHttpRequest;sourceLoader.open("GET",url,true);sourceLoader.onload=function(){if(sourceLoader.status>=200&&sourceLoader.status<400){var results=JSON.parse(sourceLoader.responseText);viewer.geojson=results;loadExtensions();for(var i=0;i<results.features.length;i++){var coords=results.features[i].geometry.coordinates;var latLng=new google.maps.LatLng(coords[1],coords[0]);pub.addMarker(latLng,results.features[i].properties[viewer.settings.popup.propSelector],{},results.features[i].properties)}if(!viewer.bounds.isEmpty()){viewer.map.fitBounds(viewer.bounds);if(useClustering){google.maps.event.addListenerOnce(viewer.map,"idle",function(){viewer.cluster.repaint()})}}}};sourceLoader.onerror=function(){};sourceLoader.send()};var serialize=function(obj,prefix){var str=[],p;for(p in obj){if(obj.hasOwnProperty(p)){var k=prefix?prefix+"["+p+"]":p,v=obj[p];str.push(v!==null&&typeof v==="object"?serialize(v,k):encodeURIComponent(k)+"="+encodeURIComponent(v))}}return str.join("&")};var extend=function(){var extended={};var deep=false;var i=0;var length=arguments.length;if(Object.prototype.toString.call(arguments[0])==="[object Boolean]"){deep=arguments[0];i++}var merge=function(obj){for(var prop in obj){if(Object.prototype.hasOwnProperty.call(obj,prop)){if(deep&&Object.prototype.toString.call(obj[prop])==="[object Object]"){extended[prop]=extend(true,extended[prop],obj[prop])}else{extended[prop]=obj[prop]}}}};for(;i<length;i++){var obj=arguments[i];merge(obj)}return extended};pub.addMarker=function(latLng,htmlContent,markerOptions,markerProps){if(Array.isArray(latLng)){latLng=new google.maps.LatLng(latLng[0],latLng[1])}var defaultOptions={position:latLng,map:viewer.map};if(viewer.settings.marker!==null&&viewer.settings.marker.icon!==null&&viewer.settings.marker.icon.imagePath){defaultOptions=extend(defaultOptions,{icon:viewer.settings.marker.icon.imagePath})}var marker=new google.maps.Marker(extend(defaultOptions,viewer.settings.marker.options,markerOptions||{}));marker.props=markerProps||null;marker.popup={content:htmlContent,path:viewer.settings.popup.source.path,param:viewer.settings.popup.source.param};if(htmlContent||viewer.popupAsync){if(viewer.popupAsync){if(marker.props!==null&&viewer.settings.popup.source.path.indexOf("%")!==-1){var url=viewer.settings.popup.source.path.replace(/%\w+%/g,function(token){token=token.replace(/%+/g,"");return marker.props[token]||token});if(typeof viewer.settings.popup.source.param==="object"){url+="?"+serialize(viewer.settings.popup.source.param)}marker.popup.path=url}}if(viewer.settings.popup.showEvent){marker.addListener(viewer.settings.popup.showEvent==="click"&&useSpiderfier?"spider_click":viewer.settings.popup.showEvent,function(){viewer.popup.close();if(viewer.popupAsync){viewer.popupLoader.abort();if(viewer.settings.popup.source.loader){viewer.popup.setContent(viewer.settings.popup.source.loaderMarkup)}viewer.popupLoader.open("GET",marker.popup.path,true);viewer.popupLoader.onload=function(){if(viewer.popupLoader.status>=200&&viewer.popupLoader.status<400){var results=JSON.parse(viewer.popupLoader.responseText);viewer.popup.setContent(results.results[0][viewer.settings.popup.propSelector])}};viewer.popupLoader.onerror=function(){};viewer.popupLoader.send()}else{viewer.popup.setContent(marker.popup.content)}viewer.popup.open(viewer.map,marker)})}if(viewer.settings.popup.hideEvent){marker.addListener(viewer.settings.popup.hideEvent,function(){viewer.popup.close()})}}viewer.markers.push(marker);if(useClustering){viewer.cluster.addMarker(marker)}if(useSpiderfier){viewer.spider.addMarker(marker)}if(viewer.settings.map.bounds){viewer.bounds.extend(latLng)}};pub.getViewer=function(){return viewer};init();return pub};return Constructor}();function onGoogleMapsApiReady(e){if(document.readyState!=="complete"){var stateCheck=setInterval(function(){if(document.readyState==="complete"){clearInterval(stateCheck);onGoogleMapsApiReady(e)}},100);return false}var customOnReadyEvent=new CustomEvent("googlemaps.onApiReady",{detail:e});document.dispatchEvent(customOnReadyEvent)}